{"remainingRequest":"C:\\Users\\Дмитрий\\Desktop\\kt-homework\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Дмитрий\\Desktop\\kt-homework\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Дмитрий\\Desktop\\kt-homework\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Дмитрий\\Desktop\\kt-homework\\src\\views\\Reg.vue?vue&type=template&id=0915376c&scoped=true&","dependencies":[{"path":"C:\\Users\\Дмитрий\\Desktop\\kt-homework\\src\\views\\Reg.vue","mtime":1588054111450},{"path":"C:\\Users\\Дмитрий\\Desktop\\kt-homework\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586973850001},{"path":"C:\\Users\\Дмитрий\\Desktop\\kt-homework\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1586973882673},{"path":"C:\\Users\\Дмитрий\\Desktop\\kt-homework\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586973850001},{"path":"C:\\Users\\Дмитрий\\Desktop\\kt-homework\\node_modules\\vue-loader\\lib\\index.js","mtime":1586973882658}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}